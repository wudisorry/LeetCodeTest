Spring boot测试类有2中形式
1.使用Spring提供的runner运行程序
2.使用SpringClassRule和SpringMethodRule类做成员变量，这种方式可以配合其他runner使用
以上2种方式不能共用
@RunWith(SpringRunner.class)
该注解表示使用指定的runner运行程序，代替Junit内置的运行程序去跑测试
这里指定的运行程序是SpringRunner，spring提供的，他是SpringJUnit4ClassRunner的子类，实际上就是SpringJUnit4ClassRunner的简写形式
SpringJUnit4ClassRunner的静态代码块里会验证运行环境（junit版本号）,构造方法里验证测试类不能包含SpringClassRule和SpringMethodRule，并构造了重要的TestContextManager!
TestContextManager构造方法里先取出配置的TestContextBootstrapper类，然后调用registerTestExecutionListeners(testContextBootstrapper.getTestExecutionListeners()),
把testContextBootstrapper的测试执行监听器注册进去。TestContextBootstrapper类会在接下来注解里讲。
最后在SpringJUnit4ClassRunner.createTest()里使用TestContextManager的方法执行监听器启动了spring容器

@SpringBootTest
这个注解有个重要的注解@BootstrapWith(SpringBootTestContextBootstrapper.class)，这就是配置的TestContextBootstrapper类（测试上下文引导程序）。
有getTestExecutionListeners（）获取测试执行监听器方法供别人使用。这些监听器可以自己额外加，只要在测试类上加注解@TestExecutionListeners就行，默认的监听器都写在jar包的META-INF/spring.factories里（这个文件和properties文件类似一样的方式取key和value，测试执行监听器都放在test相关jar包下的文件里）
*properties形式文件如果value过长，可以在换行的那行结尾加个\,\必须是一行的最后一个字符。

@AutoConfigureMockMvc
MockMvc对象通过MockMvcBuilders.webAppContextSetup(WebApplicationContext).build()构造出来，
加了这个注解后可以省去这一步，通过注入方式直接使用
MockMvc.perform()执行一个请求获取返回结果，可以对返回结果做链式处理，比如断言
andExpect()里用lambda表达式更方便


----------------------------------------------------------------
@Controller
controller类，里面的方法在不配置@ResponseBody时，返回的都是viewName，因此需要在springBoot项目里配置ViewResolver

thymeleaf是一种用于Web和独立环境的现代服务器端的Java模板引擎
在pom里配置依赖spring-boot-starter-thymeleaf，则请求能正确访问到页面（不需要配置springmvc里的那些配置）

注解url：https://blog.csdn.net/zhanglong_4444/article/details/102235908





